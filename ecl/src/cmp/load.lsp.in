;;; @configure_input@

(defconstant +cmp-module-files+
'("build:cmp;cmpdefs.lsp"
  "src:cmp;cmpmac.lsp"
  "src:cmp;cmpinline.lsp"
  "src:cmp;cmputil.lsp"
  "src:cmp;cmptype.lsp"
  "src:cmp;cmpbind.lsp"
  "src:cmp;cmpblock.lsp"
  "src:cmp;cmpcall.lsp"
  "src:cmp;cmpcatch.lsp"
  "src:cmp;cmpenv.lsp"
  "src:cmp;cmpeval.lsp"
  "src:cmp;cmpexit.lsp"
  "src:cmp;cmpflet.lsp"
  "src:cmp;cmpfun.lsp"
  "src:cmp;cmpif.lsp"
  "src:cmp;cmplam.lsp"
  "src:cmp;cmplet.lsp"
  "src:cmp;cmploc.lsp"
  "src:cmp;cmpmap.lsp"
  "src:cmp;cmpstack.lsp"
  "src:cmp;cmpmulti.lsp"
  "src:cmp;cmpspecial.lsp"
  "src:cmp;cmptag.lsp"
  "src:cmp;cmptop.lsp"
  "src:cmp;cmpvar.lsp"
  "src:cmp;cmpwt.lsp"
  "src:cmp;cmpffi.lsp"
  "src:cmp;cmpcbk.lsp"
  "src:cmp;cmpct.lsp"
  "src:cmp;cmpnum.lsp"
  "src:cmp;cmpname.lsp"
  "src:cmp;cmpopt.lsp"
  "src:cmp;cmpprop.lsp"
  "src:cmp;cmpclos.lsp"
  "src:cmp;cmpstructures.lsp"
  "src:cmp;cmparray.lsp"
  "src:cmp;cmpmain.lsp"))

(let ((si::*keep-documentation* nil))
  (mapc #'(lambda (x) (load x :verbose nil)) +cmp-module-files+)
  (load "src:cmp;sysfun" :verbose nil))

